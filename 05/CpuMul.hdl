/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=notInstrucionType);
    Or(a=notInstrucionType, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);
    
    Mux16(a=outA, b=inM, sel=instruction[12], out=yALU);
    
    ExtendAlu(x=outD, y=yALU, instruction[0..5]=instruction[6..11], instruction[7..8]=instruction[13..14], out=outALU, out=outM, zr=zrALU, ng=ngALU);
    And(a=instruction[15], b=instruction[3], out=writeM);

    And(a=zrALU, b=instruction[1], out=flagJEQ);
    And(a=ngALU, b=instruction[2], out=flagJLT);

    Not(in=ngALU, out=nonNgALU);
    Not(in=zrALU, out=nonZrALU);
    And(a=nonNgALU, b=nonZrALU, out=posALU);
    And(a=posALU, b=instruction[0], out=flagJGT);

    Or(a=flagJLT, b=flagJGT, out=tempJMP);
    Or(a=flagJEQ, b=tempJMP, out=tempJMP2);
    And(a=instruction[15], b=tempJMP2, out=loadJMP);

    PC(in=outA, load=loadJMP, inc=true, reset=reset, out=junk, out[0..14]=pc);
}