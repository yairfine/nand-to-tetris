/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=outAlu, zr=outAluZr, ng=outAluNg);
     Mul(a=x, b=y, out=product);

     Mux16(a=y, b=x, sel=instruction[4], out=shiftInput);
     ShiftLeft(in=shiftInput, out=leftShiftOut);
     ShiftRight(in=shiftInput, out=rightShiftOut);

     Mux16(a=rightShiftOut, b=leftShiftOut, sel=instruction[5], out=shiftResult);

     And(a=instruction[7], b=instruction[8], out=ALUflag);
     Mux16(a=product, b=shiftResult, sel=instruction[7], out=outShiftOrProduct);

     Mux16(a=outShiftOrProduct, b=outAlu, sel=ALUflag, out[0..7]=tempT1, out[8..15]=tempT2, out[15]=ng, out=out);
     
     Or8Way(in=tempT1, out=OrZ1);
     Or8Way(in=tempT2, out=OrZ2);   
     Or(a=OrZ1, b=OrZ2, out=preZR);
     Not(in=preZR, out=zr);


}
