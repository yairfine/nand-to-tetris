// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThePower;
    static int mult_two_q_y;

    /** Initializes the library. */
    function void init() {
        var int i, twoPower;
        let twoToThePower = Array.new(16);
        let twoPower = 1;
        let i = 0;
    
        while (i < 16) {
            let twoToThePower[i] = twoPower;
            let twoPower = twoPower + twoPower;
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return (0 - x);
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int result, shiftedX, i, length;

        let result = 0;
        let shiftedX = x;
        let length =  Math.length(y);

        while (i < length) {
            if (Math.bit(y,i) = 1) {
                let result = result + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return result;
    }

    function int bit(int x, int i) {
        var int and;
        let and = (x & twoToThePower[i]);

        if (and = 0) {
            return 0;
        } else {
            return 1;
        }
    }

    function int length(int x) {
        var int i, length, and;

        let i = 15;

        while (i > (-1)) {
            if (Math.bit(x, i) = 1) {
                return (i + 1);
            }
            let i = i - 1;
        }

        return 1;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;

        let mult_two_q_y = 0;
        let result = Math.recursiveDivide(Math.abs(x), Math.abs(y));
        
        if (((x < 0) & (y > 0) ) | ((x > 0) & (y < 0))) {
            return (0 - result);
        } else {
            return result;
        }
    } 

    function int recursiveDivide(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.recursiveDivide(x, (y + y));

        if ((x - mult_two_q_y) < y) {
            return (q + q);
        } else {
            let mult_two_q_y = mult_two_q_y + y;
            return (q + q + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, length, j, calc;
        let length =  Math.length(x);
        let j = Math.findJ(length);
        let y = 0;

        while (j > -1) {
            let calc = y + twoToThePower[j];
            let calc = Math.multiply(calc, calc);

            if ((~(calc > x)) & (calc > 0)) {
                let y = y + twoToThePower[j];
            }
            
            let j = j - 1;
        }

        return y;
    }

    function int findJ(int length) {
        var int i, prev;
        let i = 1;
        let prev = 1;

        while (i < length) {
            let prev = i;
            let i = i + i;
        }

        return prev;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
