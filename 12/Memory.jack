// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = null;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, segmentLength, previousBlock, nextBlock, newBlockAddr, segRemainder;

        let previousBlock = 0;
        let block = freeList;
        let nextBlock = ram[block];
        let segmentLength = ram[block + 1];

        while (segmentLength < size) {
            let previousBlock = block;
            let block = nextBlock;
            let nextBlock = ram[block];
            let segmentLength = ram[(block + 1)];
        }
        
        let segRemainder = segmentLength - size;
        if (segRemainder > 2) {
            // Break the segment
            let newBlockAddr = block + 2 + size;
            let ram[newBlockAddr + 1] = ((segmentLength - size) - 2);

            if (previousBlock = 0) {
                let freeList = newBlockAddr;
            }
            else {
                let ram[previousBlock] = newBlockAddr;
            }

            let ram[newBlockAddr] = nextBlock;
            let ram[block + 1] = size;
        }
        else {
            // else, segment remider is too small, take all segment.
            if (previousBlock = 0) {
                let freeList = nextBlock;
            }
            else {
                let ram[previousBlock] = nextBlock;
            }
        }

        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let ram[(o - 2)] = freeList;
        let freeList = (o - 2);
        return;
    } 
}
