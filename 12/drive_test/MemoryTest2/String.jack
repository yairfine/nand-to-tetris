// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        else {
            let str = null;
        }

        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(str = null)) {
            do str.dispose();            
        }
    
        do Memory.deAlloc(this);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, index, d;
        var boolean is_negative;

        let val =  0;
        let index = 0;
        let d = str[index];

        if (d = 45) { // if d == '-'
            let is_negative = true;
            let index = index + 1;
            let d = str[index];
        }
        else
        {
            let is_negative = false;
        }

        while ((index < length) & (47 < d) & (d < 58)) {
            
            let val = (val * 10) + (d - 48);

            let index = index + 1;
            let d = str[index];
        }
        
        if (is_negative) {
            let val = -val;
        }
        
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        do intToString(val);

        return;
    }

    method void intToString(int val) {
        var int lastDigit, div;
        var char c, div_char;

        let div = val / 10;
        let lastDigit = (val - (div * 10)) + 48;

        if (~(val < 10)) {
            do intToString(div);
        }

        do appendChar(lastDigit);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
